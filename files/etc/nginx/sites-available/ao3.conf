    upstream unicorn_squid {
      server 127.0.0.1:7083 max_fails=10 fail_timeout=0 weight=200  ;
    }
    upstream unicorn {
      server 127.0.0.1:7082 max_fails=10 fail_timeout=0 weight=200  ;
    }

    server {
        listen       8081 deferred;

        server_name  localhost;
        proxy_intercept_errors on;

        client_max_body_size 4G;

        root /home/vagrant/app/current/public/;

	# http://mailman.nginx.org/pipermail/nginx-announce/2013/000125.html
        if ($request_uri ~ " ") {
            return 444;
        } 


        # try to identify bots 
        # rewrite the url so it can be captured by location
        if ($http_user_agent ~* "(lurp|bot|spider|UnwindFetchor)" ) { 
          rewrite ^(.*)$  /bots/$1  break;
        }

        # capture rewritten bot urls 
        # rewrite the url to normal and  send the request to the bots unicorn
        location ^~ /bots/ {
          #expires max;
          rewrite ^/bots/(.*)$  $1  break;
          try_files $uri $uri.html /maintenance.html @unicorn;
        }

        # try to identify logged out users
        location ~ /works/\d+ {
          #expires max;
          try_files $uri $uri.html /maintenance.html @unicorn;
        }

        # rewrite utl so it can be captured by location
        set $logged_out '';
        if ($http_cookie !~ 'user_credentials' ) {
          set $logged_out '1';
        }
        if ($http_cookie ~ 'admin_credentials' ) {
          set $logged_out '';
        }
        if ($http_cookie ~ 'flash_is_set' ) {
          set $logged_out '';
        }
        if ($http_cookie = '' ) {
           set $logged_out '';
        }
        # Try not to send the stories to squid
        if ( $uri  ~* "/works/.*" ) {
           set $logged_out '';
        }
	# Try not to send downloads to squid ( they have their own methods )
	if ( $uri  ~* "/downloads/.*" ) {
           set $logged_out '';
        }
        if ( $uri  ~* "/50..html" ) {
           set $logged_out '';
        }
        if ( $uri  ~* "/collections/.*/signups/summary" ) {
           set $logged_out '';
        }


	##############################################
	# To disable squid set logged_out to ""      #
	##############################################

	#set  $logged_out '';



        if ($logged_out = '1' ) {
            rewrite ^(.*)$  /logged_out/$1  break;
        }

        location ~ ^/logged_out(|/collections/.*/signups/summary|/collections/.*/potential_matches) {
          #This is to steer the download and tags on to the front end machine that is hosting the file system
          rewrite ^/logged_out/(.*)$  $1  break;
          try_files $uri $uri.html /maintenance.html @unicorn ;
        }

        location ^~ /logged_out/ {
          #expires max;
          # if it doesn't make it to @unicorn it's a static file
          rewrite ^/logged_out/(.*)$  $1  break;
          try_files $uri $uri.html /maintenance.html @unicorn_squid;
        }


        location / {
          #expires max;
          # if it doesn't make it to @unicorn it's a static file
          try_files $uri $uri.html /maintenance.html @unicorn;
        }

        location ~ ^(/downloads|/collections/.*/signups/summary|/collections/.*/potential_matches) {
	  #This is to steer the download and long running bits on to the front end machine that is hosting the file system
	  try_files $uri $uri.html /maintenance.html @unicorn ;
	}

        location @unicorn {
          proxy_pass http://unicorn;
        }

        location @unicorn_squid {
          proxy_pass http://unicorn;
          limit_except PUT POST DELETE {
               proxy_pass http://unicorn_squid;
          }
        }

        error_page 502 504 /502.html;
        location = /502.html {
        root /home/vagrant/app/current/public/;
        }
        error_page 500 /500.html;
        location = /500.html {
        root /home/vagrant/app/current/public/;
        }
    }
